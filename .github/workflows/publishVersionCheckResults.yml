name: Publish Version Check Results
on:
  workflow_call
    inputs:
      botName:
        description: The name of the bot that adds the necessary version increment changes
        type: string
        required: true
      botMail:
        description: The name of the bot that adds the necessary version increment changes
        type: string
        required: true
      excludedProjects:
        description: The comma-separated list of projects that should not be skipped (e.g. products or repositories). Can speed-up the check
        type: string
        required: false
        default: ''
    secrets:
      githubBotPAT:
        description: The personal access token (with scope 'public_repo') of the bot to push a required change to a PR branch in a fork.
        required: false

permissions: {}

jobs:
  unit-version-check-results:
    name: Publish Version Check Results
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read
      actions: read

    steps:
       - uses: actions/checkout@v4
         with:
           ref: '${{ github.event.pull_request.head.sha }}'
           persist-credentials: false #Opt out from persisting the default Github-token authentication in order to enable use of the bot's PAT when pushing below
#        token: ${{ secrets.githubBotPAT }} TODO: alternativly use this and and just add the fork without basic auth below.

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@82082dac68ad6a19d980f8ce817e108b9f496c2a # v2.17.1
        id: test-results
        with:
          commit: ${{ github.event.workflow_run.head_sha }}
          event_file: artifacts/Event File/event.json
          event_name: ${{ github.event.workflow_run.event }}
          files: "artifacts/**/*.xml"


  - name: 'Download artifact'
    uses: actions/github-script@v6
    with:
      script: |
        let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
           owner: context.repo.owner,
           repo: context.repo.repo,
           run_id: context.payload.workflow_run.id,
        });
        let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
          return artifact.name == "pr_number"
        })[0];
        let download = await github.rest.actions.downloadArtifact({
           owner: context.repo.owner,
           repo: context.repo.repo,
           artifact_id: matchArtifact.id,
           archive_format: 'zip',
        });
        let fs = require('fs');
        fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_number.zip`, Buffer.from(download.data));

  - name: 'Unzip artifact'
    run: unzip pr_number.zip

  - name: 'Comment on PR'
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        let fs = require('fs');
        let issue_number = Number(fs.readFileSync('./pr_number'));
        await github.rest.issues.createComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: issue_number,
          body: 'Thank you for the PR!'
        });


    - name: Add information comment
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: ${{ always() }} 
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs')
          const fileList = `${{ steps.git-commit.outputs.file-list }}`
          if (fileList) { // if list is empty, no versions were changed
            let commentBody = 
            github.rest.issues.createComment({
              issue_number: context.issue.number, ...context.repo, body: `
          This pull request changes some projects for the first time in this development.
          Therefore the following files need a version increment:
          \`\`\`
          ${fileList}
          \`\`\`
          An additional commit containing all the necessary changes was pushed to the top of this PR's branch. To obtain these changes (for example if you want to push more changes) either fetch from your fork or apply the _git patch_.
          <details>
          <summary>Git patch</summary>
          
          \`\`\`
          ${ fs.readFileSync( process.env.GITHUB_WORKSPACE + '/version_increments.patch', {encoding: 'utf8'}).trim() }
          \`\`\`
          </details>
          `.trim()
            })
          }