name: Publish Version Check Results
on:
  workflow_call:
    inputs:
      botName:
        description: The name of the bot that adds the necessary version increment changes
        type: string
        required: true
      botMail:
        description: The name of the bot that adds the necessary version increment changes
        type: string
        required: true
    secrets:
      githubBotPAT:
        description: The personal access token (with scope 'public_repo') of the bot to push a required change to a PR branch in a fork.
        required: false

# TODO: check if we can derive some inputs from the original workflow or the git-patch

permissions: read-all

jobs:
  versions-check-result:
    name: Publish Version Check Results
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'

    steps:
    - name: Dump GitHub context
      run: echo '${{ toJSON(github) }}'

    - name: Search version increment git patch
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: search-patch
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             run_id: context.payload.workflow_run.id,
             ...context.repo
          })
          let artifact = allArtifacts.data.artifacts.find(artifact => artifact.name == 'versions-git-patch')
          return artifact?.id

    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      if: steps.search-patch.outputs.result
      with:
        ref: '${{ github.event.workflow_run.head_sha }}'
        persist-credentials: false #Opt out from persisting the default Github-token authentication in order to enable use of the bot's PAT when pushing below
#        token: ${{ secrets.githubBotPAT }} TODO: alternativly use this and and just add the fork without basic auth below.

    - name: Download version increment git patch
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: fetch-patch
      if: steps.search-patch.outputs.result
      with:
        script: |
          let download = await github.rest.actions.downloadArtifact({
             artifact_id: ${{ steps.search-patch.outputs.result }},
             archive_format: 'zip',
             ...context.repo
          })
          let fs = require('fs')
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/patch.zip`, Buffer.from(download.data))
          await exec.exec('unzip', ['patch.zip'])
          let pr_number = Number(fs.readFileSync('github_pull_request_number.txt'))
          core.setOutput('pull_request_number', pr_number)
          core.info('The PR is: ' + pr_number)
          await io.rmRF('patch.zip')
          await io.rmRF('github_pull_request_number.txt')

    - name: Apply and push version increment
      id: git-commit
      if: steps.search-patch.outputs.result
      run: |
          # Set initial placeholder name/mail and read it from the patch later
          git config --global user.email 'foo@bar'
          git config --global user.name 'Foo Bar'
          
          git am version_increments.patch
          
          # Read the author's name+mail from the just applied patch and recommit it with both set as committer
          botMail=$(git log -1 --pretty=format:'%ae')
          botName=$(git log -1 --pretty=format:'%an')
          git config --global user.email "${botMail}"
          git config --global user.name "${botName}"
          git commit --amend --no-edit
          
          fileList=$(git diff-tree --no-commit-id --name-only HEAD -r)
          echo "file-list<<EOF" >> $GITHUB_OUTPUT
          echo "$fileList" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          #git remote add 'fork' https://github.com/${{ github.event.workflow_run.head_repository.full_name }}.git
          #git remote -v
          #git push 'fork' 'HEAD:refs/heads/${{ github.event.workflow_run.head_branch }}'
          git push \
            "https://oauth2:${BOT_TOKEN}@github.com/${{ github.event.workflow_run.head_repository.full_name }}.git" \
            'HEAD:refs/heads/${{ github.event.workflow_run.head_branch }}'
      env:
        BOT_TOKEN: ${{ secrets.githubBotPAT }}
#    - name: 'Comment on PR'
#      uses: actions/github-script@v6
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        script: |
#          let fs = require('fs');
#          let issue_number = Number(fs.readFileSync('./pr_number'));
#          await github.rest.issues.createComment({
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            issue_number: issue_number,
#            body: 'Thank you for the PR!'
#          });



    - name: Add information comment
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: steps.search-patch.outputs.result
      with:
        github-token: ${{ secrets.githubBotPAT }}
        script: |
          let prNumber = ${{ steps.fetch-patch.outputs.pull_request_number }}
          core.info('Context issue number: ' + prNumber)
          const fs = require('fs')
          const fileList = `${{ steps.git-commit.outputs.file-list }}`
          if (fileList) { // if list is empty, no versions were changed
            github.rest.issues.createComment({
              issue_number: prNumber, ...context.repo, body: `
          This pull request changes some projects for the first time in this development.
          Therefore the following files need a version increment:
          \`\`\`
          ${fileList}
          \`\`\`
          An additional commit containing all the necessary changes was pushed to the top of this PR's branch. To obtain these changes (for example if you want to push more changes) either fetch from your fork or apply the _git patch_.
          <details>
          <summary>Git patch</summary>
          
          \`\`\`
          ${ fs.readFileSync( process.env.GITHUB_WORKSPACE + '/version_increments.patch', {encoding: 'utf8'}).trim() }
          \`\`\`
          </details>
          `.trim()
            })
          }


  # TODO: Add an FAQ about version bumps?
  # TODO: make comment updatable