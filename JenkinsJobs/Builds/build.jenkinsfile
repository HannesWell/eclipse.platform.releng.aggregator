
def I_TEST_CONFIGURATIONS = [
  [ os: 'linux' , ws: 'gtk'  , arch: 'x86_64' , javaVersion: 21],
  [ os: 'linux' , ws: 'gtk'  , arch: 'x86_64' , javaVersion: 23],
  [ os: 'macosx', ws: 'cocoa', arch: 'aarch64', javaVersion: 21],
  [ os: 'macosx', ws: 'cocoa', arch: 'x86_64' , javaVersion: 21],
  [ os: 'win32' , ws: 'win32', arch: 'x86_64' , javaVersion: 21],
]
def Y_TEST_CONFIGURATIONS = [
  [ os: 'linux' , ws: 'gtk'  , arch: 'x86_64' , javaVersion: 21],
  [ os: 'linux' , ws: 'gtk'  , arch: 'x86_64' , javaVersion: 24],
  [ os: 'macosx', ws: 'cocoa', arch: 'aarch64', javaVersion: 21],
  [ os: 'macosx', ws: 'cocoa', arch: 'x86_64' , javaVersion: 21],
]
def BUILD = {
	def matcher = 'I-build-4.35' =~ '(?<type>[IY])-build-(?<major>\\d).(?<minor>\\d+)'
	if (matcher) {
		def buildConfig = [ type: matcher.group('type'), testPrefix: "ep${matcher.group('major')}${matcher.group('minor')}${matcher.group('type')}-unit"]
		switch(buildConfig.type) {
			case 'I': return [*:buildConfig,
				typeName: 'Integration' , branchLabel: 'master',
				mailingList: 'wellmann.hannes1@gmx.net', testJobFolder:'AutomatedTests', testConfigurations: I_TEST_CONFIGURATIONS]
			case 'Y': return [*:buildConfig,
				typeName: 'Beta Java 24', branchLabel: 'java24',
				mailingList: 'wellmann.hannes1@gmx.net'            , testJobFolder:'YPBuilds'      , testConfigurations: Y_TEST_CONFIGURATIONS]
				//TODO: overwrite -Declipse-snapshots-repo.url=https://https://repo.eclipse.org/content/repositories/eclipse-snapshots to what-ever reasonable
		}
	}
	error("Unsupported job: $JOB_BASE_NAME" )
}()

//TODO: add properties for:
// 1. BUILD_ID for test-input
// 2. test-configuration to run (as comma-separted list derived from the default)
// 3. A silent mode where any publihsing/pushing is skipped and no mail is send (for debuggin).

def testConfigurationsExpected = BUILD.testConfigurations.collect{c ->
		"${BUILD.testPrefix}-${c.os}-${c.arch}-java${c.javaVersion}_${c.os}.${c.ws}.${c.arch}_${c.javaVersion}"
	}.join(',')

pipeline {
	options {
		timeout(time: 360, unit: 'MINUTES')
		timestamps()
		buildDiscarder(logRotator(numToKeepStr:'25'))
	}
  agent {
    kubernetes {
      inheritFrom 'ubuntu-2404'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: "jnlp"
    resources:
      limits:
        memory: "8Gi"
        cpu: "4000m"
      requests:
        memory: "6Gi"
        cpu: "2000m"
"""
    }
  }
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
		ant 'apache-ant-latest'
	}
	environment {
		BUILD_TYPE = "${BUILD.type}"
		BUILD_TYPE_NAME = "${BUILD.typeName}"
		PATCH_OR_BRANCH_LABEL = "${BUILD.branchLabel}"

		MAVEN_OPTS = '-Xmx4G'
		CJE_ROOT = "${WORKSPACE}/cje-production"
		logDir = "$CJE_ROOT/buildlogs"
		TEST_CONFIGURATIONS_EXPECTED = "${testConfigurationsExpected}"
	}
	stages {
		stage('Setup intial configuration'){
			steps {
				dir("${CJE_ROOT}") {
                    sh '''
                        chmod +x mbscripts/*
                        mkdir -p $logDir
                    '''
				}
			}
		}
	  stage('Generate environment variables'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                sh '''
                    set -eo pipefail
                    ./mb010_createEnvfiles.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb010_createEnvfiles.sh.log
                '''
				}
			}
		}
		stage('Export environment variables stage 1'){
			steps {
				exportEnvironmentVariablesFromProperties("${CJE_ROOT}/buildproperties.properties", [ 'BUILD_ID', 'STREAM', 'RELEASE_VER' ])
			}
		}
	  stage('Create Base builder'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
		      sshagent(['projects-storage.eclipse.org-bot-ssh']) {
		                sh '''
		                    set -eo pipefail
		                    ./mb020_createBaseBuilder.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb020_createBaseBuilder.sh.log
		                '''
		        }
				}
			}
		}
	  stage('Download reference repo for repo reports'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                  sshagent(['projects-storage.eclipse.org-bot-ssh']) {
                    sh '''
                        set -eo pipefail
                        ./mb030_downloadBuildToCompare.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb030_downloadBuildToCompare.sh.log
                    '''
                  }
				}
			}
		}
	  stage('Clone Repositories'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                  sshagent(['github-bot-ssh']) {
                    sh '''
                        set -eo pipefail
                        git config --global user.email "eclipse-releng-bot@eclipse.org"
                        git config --global user.name "Eclipse Releng Bot"
                        ./mb100_cloneRepos.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb100_cloneRepos.sh.log
                    '''
                  }
				}
			}
		}
	  stage('Aggregator maven build'){
	      environment {
                KEYRING = credentials('secret-subkeys-releng.asc')
                MAVEN_GPG_PASSPHRASE = credentials('secret-subkeys-releng.asc-passphrase')
          }
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                    sh '''
                        set -eo pipefail
                        ./mb220_buildSdkPatch.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb220_buildSdkPatch.sh.log
                    '''
				}
			}
		}
	  stage('Gather Eclipse Parts'){
	      environment {
                KEYRING = credentials('secret-subkeys-releng.asc')
                KEYRING_PASSPHRASE = credentials('secret-subkeys-releng.asc-passphrase')
          }
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                          sh '''
                            set -eo pipefail
                            bash -x ./mb300_gatherEclipseParts.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb300_gatherEclipseParts.sh.log
                          '''
				}
			}
		}
	  stage('Gather Equinox Parts'){
	  environment {
                KEYRING = credentials('secret-subkeys-releng.asc')
                KEYRING_PASSPHRASE = credentials('secret-subkeys-releng.asc-passphrase')
          }
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                          sh '''
                            set -eo pipefail
                            ./mb310_gatherEquinoxParts.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb310_gatherEquinoxParts.sh.log
                          '''
				}
			}
		}
	  stage('Generate Repo reports'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                      sh '''
                        set -eo pipefail
                        ./mb500_createRepoReports.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb500_createRepoReports.sh.log
                      '''
				}
			}
		}
	  stage('Generate API tools reports'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                      sh '''
                        set -eo pipefail
                        ./mb510_createApiToolsReports.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb510_createApiToolsReports.sh.log
                      '''
				}
			}
		}
		stage('Export environment variables stage 2'){
			steps {
				exportEnvironmentVariablesFromProperties("${CJE_ROOT}/buildproperties.properties", [ 'COMPARATOR_ERRORS_SUBJECT' ])
			}
		}
	  stage('Archive artifacts'){
          steps {
                sh '''
                    source $CJE_ROOT/buildproperties.shsource
                    cp -r $logDir/* $CJE_ROOT/$DROP_DIR/$BUILD_ID/buildlogs
                    rm -rf $CJE_ROOT/$DROP_DIR/$BUILD_ID/apitoolingreference
                    cp $CJE_ROOT/buildproperties.* $CJE_ROOT/$DROP_DIR/$BUILD_ID
                    cp $CJE_ROOT/$DROP_DIR/$BUILD_ID/buildproperties.* $CJE_ROOT/$EQUINOX_DROP_DIR/$BUILD_ID
                '''
            }
		}
	}
	post {
		always {
			archiveArtifacts 'cje-production/siteDir/**'
		}
		failure {
			emailext subject: "${RELEASE_VER} ${BUILD_TYPE}-Build: ${BUILD_ID} - BUILD FAILED",
				body: "Please go to ${BUILD_URL}console and check the build failure.", mimeType: 'text/plain',
				to: "${BUILD.mailingList}", from:'genie.releng@eclipse.org'
		}
		success {
			emailext subject: "${RELEASE_VER} ${BUILD_TYPE}-Build: ${BUILD_ID} ${COMPARATOR_ERRORS_SUBJECT}",
			body: ("""\
			Eclipse downloads:
			https://download.eclipse.org/eclipse/downloads/drops4/${BUILD_ID}
			
			Build logs and/or test results (eventually):
			https://download.eclipse.org/eclipse/downloads/drops4/${BUILD_ID}/testResults.php
			""" + (env.COMPARATOR_ERRORS_SUBJECT == '' ? '' : """
			Check unanticipated comparator messages:
			https://download.eclipse.org/eclipse/downloads/drops4/${BUILD_ID}/buildlogs/comparatorlogs/buildtimeComparatorUnanticipated.log.txt
			""") + """
			Software site repository:
			https://download.eclipse.org/eclipse/updates/${RELEASE_VER}-${BUILD_TYPE}-builds
			
			Specific (simple) site repository:
			https://download.eclipse.org/eclipse/updates/${RELEASE_VER}-${BUILD_TYPE}-builds/${BUILD_ID}
			
			Equinox downloads:
			https://download.eclipse.org/equinox/drops/${BUILD_ID}
			""").stripIndent(), mimeType: 'text/plain',
			to: "${BUILD.mailingList}", from:'genie.releng@eclipse.org'
		}
	}
}

@NonCPS
def exportEnvironmentVariablesFromProperties(String propertiesFile, Collection<String> exportedEnvironmentVariables){
	def properties = readProperties(file: propertiesFile, charset: 'UTF-8')
	for (envVar in exportedEnvironmentVariables) {
		def value = properties[envVar].trim()
		env[envVar] = value.startsWith('"') && value.endsWith('"') ? value.substring(1, value.length() - 1) : value
		echo "Exported environment variable '${envVar}=${env[envVar]}'"
	}
}
